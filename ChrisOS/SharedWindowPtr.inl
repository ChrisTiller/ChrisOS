#pragma once

#include "SharedWindowPtr.h"
#include "Window.h"





template <class T>
SharedWindowPtr<T>::SharedWindowPtr(Window &window, const std::string &windowName = "")
{
	window.addChildWindow(*this, windowName);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
SharedWindowPtr<T>::SharedWindowPtr(const SharedWindowPtr<T>& copy)
{
	if (copy.get() != nullptr)
	{
		m_WidgetPtr = copy.get();

		m_RefCount = copy.getRefCount();
		*m_RefCount += 1;
	}
	else
	{
		m_WidgetPtr = nullptr;
		m_RefCount = nullptr;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
template <class U>
SharedWindowPtr<T>::SharedWindowPtr(const SharedWindowPtr<U>& copy)
{
	if (copy.get() != nullptr)
	{
		m_WidgetPtr = static_cast<T*>(copy.get());

		m_RefCount = copy.getRefCount();
		*m_RefCount += 1;
	}
	else
	{
		m_WidgetPtr = nullptr;
		m_RefCount = nullptr;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
SharedWindowPtr<T>::~SharedWindowPtr()
{
	reset();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
void SharedWindowPtr<T>::init()
{
	reset();

	m_RefCount = new unsigned int;
	*m_RefCount = 1;

	m_WidgetPtr = new T();
	m_WidgetPtr->m_Callback.widget = get();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
void SharedWindowPtr<T>::reset()
{
	if (m_WidgetPtr != nullptr)
	{
		if (*m_RefCount == 1)
		{
			delete m_WidgetPtr;
			delete m_RefCount;

			m_WidgetPtr = nullptr;
			m_RefCount = nullptr;
		}
		else
			*m_RefCount -= 1;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
bool SharedWindowPtr<T>::operator!() const
{
	return m_WidgetPtr == nullptr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
template <typename U>
bool SharedWindowPtr<T>::operator ==(const SharedWindowPtr<U>& right) const
{
	return m_WidgetPtr == right.get();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
bool SharedWindowPtr<T>::operator ==(const SharedWindowPtr<T>& right) const
{
	return m_WidgetPtr == right.m_WidgetPtr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
template <typename U>
bool SharedWindowPtr<T>::operator !=(const SharedWindowPtr<U>& right) const
{
	return m_WidgetPtr != right.get();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
bool SharedWindowPtr<T>::operator !=(const SharedWindowPtr<T>& right) const
{
	return m_WidgetPtr != right.m_WidgetPtr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
T& SharedWindowPtr<T>::operator*() const
{
	assert(m_WidgetPtr != nullptr);
	return *m_WidgetPtr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
T* SharedWindowPtr<T>::operator->() const
{
	assert(m_WidgetPtr != nullptr);
	return m_WidgetPtr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
T* SharedWindowPtr<T>::getWindow() const
{
	return m_WidgetPtr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
unsigned int* SharedWindowPtr<T>::getRefCount() const
{
	return m_RefCount;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
SharedWindowPtr<T> SharedWindowPtr<T>::clone() const
{
	if (m_WidgetPtr != nullptr)
	{
		SharedWindowPtr<T> pointer = nullptr;

		pointer.m_RefCount = new unsigned int;
		*pointer.m_RefCount = 1;

		pointer.m_WidgetPtr = m_WidgetPtr->clone();
		pointer.m_WidgetPtr->m_Callback.widget = pointer.get();
		return pointer;
	}
	else
		return nullptr;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
